from ortools_vrp_solver import create_data_model, solve

zone_demands = [0, 1, 1, 2, 4, 2, 4, 8, 8, 1, 2, 1, 2, 4, 4, 8, 8]
distance_matrix = [
    [0, 548, 776, 696, 582, 274, 502, 194, 308, 194, 536, 502, 388, 354, 468, 776, 662],
    [548, 0, 684, 308, 194, 502, 730, 354, 696, 742, 1084, 594, 480, 674, 1016, 868, 1210],
    [776, 684, 0, 992, 878, 502, 274, 810, 468, 742, 400, 1278, 1164, 1130, 788, 1552, 754],
    [696, 308, 992, 0, 114, 650, 878, 502, 844, 890, 1232, 514, 628, 822, 1164, 560, 1358],
    [582, 194, 878, 114, 0, 536, 764, 388, 730, 776, 1118, 400, 514, 708, 1050, 674, 1244],
    [274, 502, 502, 650, 536, 0, 228, 308, 194, 240, 582, 776, 662, 628, 514, 1050, 708],
    [502, 730, 274, 878, 764, 228, 0, 536, 194, 468, 354, 1004, 890, 856, 514, 1278, 480],
    [194, 354, 810, 502, 388, 308, 536, 0, 342, 388, 730, 468, 354, 320, 662, 742, 856],
    [308, 696, 468, 844, 730, 194, 194, 342, 0, 274, 388, 810, 696, 662, 320, 1084, 514],
    [194, 742, 742, 890, 776, 240, 468, 388, 274, 0, 342, 536, 422, 388, 274, 810, 468],
    [536, 1084, 400, 1232, 1118, 582, 354, 730, 388, 342, 0, 878, 764, 730, 388, 1152, 354],
    [502, 594, 1278, 514, 400, 776, 1004, 468, 810, 536, 878, 0, 114, 308, 650, 274, 844],
    [388, 480, 1164, 628, 514, 662, 890, 354, 696, 422, 764, 114, 0, 194, 536, 388, 730],
    [354, 674, 1130, 822, 708, 628, 856, 320, 662, 388, 730, 308, 194, 0, 342, 422, 536],
    [468, 1016, 788, 1164, 1050, 514, 514, 662, 320, 274, 388, 650, 536, 342, 0, 764, 194],
    [776, 868, 1552, 560, 674, 1050, 1278, 742, 1084, 810, 1152, 274, 388, 422, 764, 0, 798],
    [662, 1210, 754, 1358, 1244, 708, 480, 856, 514, 468, 354, 844, 730, 536, 194, 798, 0]
]

distances = {(0, 0): 0, (0, 1): 548, (0, 2): 776, (0, 3): 696, (0, 4): 582, (0, 5): 274, (0, 6): 502, (0, 7): 194, (0, 8): 308, (0, 9): 194, (0, 10): 536, (0, 11): 502, (0, 12): 388, (0, 13): 354, (0, 14): 468, (0, 15): 776, (0, 16): 662, (1, 0): 548, (1, 1): 0, (1, 2): 684, (1, 3): 308, (1, 4): 194, (1, 5): 502, (1, 6): 730, (1, 7): 354, (1, 8): 696, (1, 9): 742, (1, 10): 1084, (1, 11): 594, (1, 12): 480, (1, 13): 674, (1, 14): 1016, (1, 15): 868, (1, 16): 1210, (2, 0): 776, (2, 1): 684, (2, 2): 0, (2, 3): 992, (2, 4): 878, (2, 5): 502, (2, 6): 274, (2, 7): 810, (2, 8): 468, (2, 9): 742, (2, 10): 400, (2, 11): 1278, (2, 12): 1164, (2, 13): 1130, (2, 14): 788, (2, 15): 1552, (2, 16): 754, (3, 0): 696, (3, 1): 308, (3, 2): 992, (3, 3): 0, (3, 4): 114, (3, 5): 650, (3, 6): 878, (3, 7): 502, (3, 8): 844, (3, 9): 890, (3, 10): 1232, (3, 11): 514, (3, 12): 628, (3, 13): 822, (3, 14): 1164, (3, 15): 560, (3, 16): 1358, (4, 0): 582, (4, 1): 194, (4, 2): 878, (4, 3): 114, (4, 4): 0, (4, 5): 536, (4, 6): 764, (4, 7): 388, (4, 8): 730, (4, 9): 776, (4, 10): 1118, (4, 11): 400, (4, 12): 514, (4, 13): 708, (4, 14): 1050, (4, 15): 674, (4, 16): 1244, (5, 0): 274, (5, 1): 502, (5, 2): 502, (5, 3): 650, (5, 4): 536, (5, 5): 0, (5, 6): 228, (5, 7): 308, (5, 8): 194, (5, 9): 240, (5, 10): 582, (5, 11): 776, (5, 12): 662, (5, 13): 628, (5, 14): 514, (5, 15): 1050, (5, 16): 708, (6, 0): 502, (6, 1): 730, (6, 2): 274, (6, 3): 878, (6, 4): 764, (6, 5): 228, (6, 6): 0, (6, 7): 536, (6, 8): 194, (6, 9): 468, (6, 10): 354, (6, 11): 1004, (6, 12): 890, (6, 13): 856, (6, 14): 514, (6, 15): 1278, (6, 16): 480, (7, 0): 194, (7, 1): 354, (7, 2): 810, (7, 3): 502, (7, 4): 388, (7, 5): 308, (7, 6): 536, (7, 7): 0, (7, 8): 342, (7, 9): 388, (7, 10): 730, (7, 11): 468, (7, 12): 354, (7, 13): 320, (7, 14): 662, (7, 15): 742, (7, 16): 856, (8, 0): 308, (8, 1): 696, (8, 2): 468, (8, 3): 844, (8, 4): 730, (8, 5): 194, (8, 6): 194, (8, 7): 342, (8, 8): 0, (8, 9): 274, (8, 10): 388, (8, 11): 810, (8, 12): 696, (8, 13): 662, (8, 14): 320, (8, 15): 1084, (8, 16): 514, (9, 0): 194, (9, 1): 742, (9, 2): 742, (9, 3): 890, (9, 4): 776, (9, 5): 240, (9, 6): 468, (9, 7): 388, (9, 8): 274, (9, 9): 0, (9, 10): 342, (9, 11): 536, (9, 12): 422, (9, 13): 388, (9, 14): 274, (9, 15): 810, (9, 16): 468, (10, 0): 536, (10, 1): 1084, (10, 2): 400, (10, 3): 1232, (10, 4): 1118, (10, 5): 582, (10, 6): 354, (10, 7): 730, (10, 8): 388, (10, 9): 342, (10, 10): 0, (10, 11): 878, (10, 12): 764, (10, 13): 730, (10, 14): 388, (10, 15): 1152, (10, 16): 354, (11, 0): 502, (11, 1): 594, (11, 2): 1278, (11, 3): 514, (11, 4): 400, (11, 5): 776, (11, 6): 1004, (11, 7): 468, (11, 8): 810, (11, 9): 536, (11, 10): 878, (11, 11): 0, (11, 12): 114, (11, 13): 308, (11, 14): 650, (11, 15): 274, (11, 16): 844, (12, 0): 388, (12, 1): 480, (12, 2): 1164, (12, 3): 628, (12, 4): 514, (12, 5): 662, (12, 6): 890, (12, 7): 354, (12, 8): 696, (12, 9): 422, (12, 10): 764, (12, 11): 114, (12, 12): 0, (12, 13): 194, (12, 14): 536, (12, 15): 388, (12, 16): 730, (13, 0): 354, (13, 1): 674, (13, 2): 1130, (13, 3): 822, (13, 4): 708, (13, 5): 628, (13, 6): 856, (13, 7): 320, (13, 8): 662, (13, 9): 388, (13, 10): 730, (13, 11): 308, (13, 12): 194, (13, 13): 0, (13, 14): 342, (13, 15): 422, (13, 16): 536, (14, 0): 468, (14, 1): 1016, (14, 2): 788, (14, 3): 1164, (14, 4): 1050, (14, 5): 514, (14, 6): 514, (14, 7): 662, (14, 8): 320, (14, 9): 274, (14, 10): 388, (14, 11): 650, (14, 12): 536, (14, 13): 342, (14, 14): 0, (14, 15): 764, (14, 16): 194, (15, 0): 776, (15, 1): 868, (15, 2): 1552, (15, 3): 560, (15, 4): 674, (15, 5): 1050, (15, 6): 1278, (15, 7): 742, (15, 8): 1084, (15, 9): 810, (15, 10): 1152, (15, 11): 274, (15, 12): 388, (15, 13): 422, (15, 14): 764, (15, 15): 0, (15, 16): 798, (16, 0): 662, (16, 1): 1210, (16, 2): 754, (16, 3): 1358, (16, 4): 1244, (16, 5): 708, (16, 6): 480, (16, 7): 856, (16, 8): 514, (16, 9): 468, (16, 10): 354, (16, 11): 844, (16, 12): 730, (16, 13): 536, (16, 14): 194, (16, 15): 798, (16, 16): 0}
durations = {k: int(v // 83) for k, v in distances.items()}
vehicle_capacities = [15, 15, 15, 15]

data = create_data_model(zone_demands, distances, durations, vehicle_capacities)
solution = solve(data)
print(solution)
